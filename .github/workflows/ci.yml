name: ci
on:
  pull_request: {}
  push:
    branches:
      - main
env:
  CARGO_TERM_COLOR: always
  GO_VERSION: '1.18'
  ACTION_MSRV_TOOLCHAIN: 1.59.0
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: .github/install-deps
      - name: Select Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env['ACTION_MSRV_TOOLCHAIN']  }}
          default: true
          override: true
          components: rustfmt
      - run: cargo build

  release-static:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-static-${{ hashFiles('**/Cargo.lock') }}
      - run: make release-static
      - run: target/x86_64-unknown-linux-musl/release/conmonrs -v
      - uses: actions/upload-artifact@v2
        with:
          name: conmonrs
          path: target/x86_64-unknown-linux-musl/release/conmonrs

  doc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-doc-${{ hashFiles('**/Cargo.lock') }}
      - run: .github/install-deps
      - name: Select Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env['ACTION_MSRV_TOOLCHAIN']  }}
          default: true
          override: true
          components: rustfmt
      - name: Cargo doc
        run: cargo doc --no-deps

  lint-clippy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-clippy-${{ hashFiles('**/Cargo.lock') }}
      - run: .github/install-deps
      - name: Select Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env['ACTION_MSRV_TOOLCHAIN']  }}
          default: true
          override: true
          components: clippy, rustfmt
      - name: Clippy Lint
        run: cargo clippy --all-targets -- -D warnings

  lint-rustfmt:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Select Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env['ACTION_MSRV_TOOLCHAIN']  }}
          default: true
          override: true
          components: rustfmt
      - name: Rustfmt
        run: cargo fmt && git diff --exit-code

  test-unit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - run: .github/install-deps
      - name: Select Nightly Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: Install rustfmt
        shell: bash
        run: rustup component add rustfmt
      - name: Unit tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --bins --no-fail-fast
        env:
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests'
          RUSTDOCFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests'
      - name: Coverage
        uses: actions-rs/grcov@v0.1
        with:
          config: .github/grcov.yml
      - name: Upload Results
        uses: codecov/codecov-action@v2

  test-integration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Rust and Golang Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-cargo-test-integration-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/go.sum') }}
      - name: Setup Testfiles Cache
        uses: actions/cache@v2
        with:
          path: |
            /tmp/conmon-test-images
          key: ${{ runner.os }}-cargo-test-files-${{ hashFiles('pkg/client/files_test.go') }}
      - run: .github/install-deps
      - name: Integration tests
        run: RUNTIME_PATH="/usr/sbin/runc" make integration
